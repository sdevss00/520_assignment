{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    \n    if not string:\n        return string\n    for i in range(len(string) - 1, -1, -1):\n        if string[i:] == string[i:][::-1]:\n            if i == 0:\n                return string\n            else:\n                return string[:i] + string[::-1]\n"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    \n    if string == string[::-1]:\n        return string\n    else:\n        for i in range(len(string) - 1, -1, -1):\n            if string[i:] == string[i:][::-1]:\n                return string + string[:i][::-1]\n"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    \n    if not string:\n        return ''\n    if string == string[::-1]:\n        return string\n    for i in range(len(string) - 1, -1, -1):\n        if string[i:] == string[i:][::-1]:\n            return string[:i] + string[::-1]\n"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    return numbers[1], numbers[2]\n\n# Test cases\nassert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\nassert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    left_index = bisect.bisect_left(numbers, numbers[0])\n    right_index = bisect.bisect_right(numbers, numbers[-1])\n    return numbers[left_index], numbers[right_index]\n\n# Test cases\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))  # Output: (2.0, 2.2)\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))  # Output: (2.0, 2.0)\n"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float] | None:\n    if len(numbers) < 2:\n        return None\n    return tuple(sorted(numbers)[:2])\n"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]\n"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]\n"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]\n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    return ''.join([chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a')) if ch != 'z' else 'a' for ch in s])\n\n\ndef decode_shift(s: str):\n    return ''.join([chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) if ch != 'a' else 'z' for ch in s])\n"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    return ''.join([chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a')) for ch in s])\n\n\ndef decode_shift(s: str):\n    return ''.join([chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s])\n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return n * (n + 1) // 2\n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n\n# Test cases\nassert sum_to_n(30) == 465\nassert sum_to_n(100) == 5050\nassert sum_to_n(5) == 15\nassert sum_to_n(10) == 55\nassert sum_to_n(1) == 1\n"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst: return []\n    min_val = min(lst)\n    max_val = max(lst)\n    if min_val == max_val:\n        return [min_val] * len(lst)\n    return [min_val] + strange_sort_list([x for x in lst if x != min_val or x != max_val]) + [max_val]\n"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    result = []\n    while lst:\n        min_val = min(lst)\n        result.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            result.append(max_val)\n            lst.remove(max_val)\n        else:\n            break\n    return result\n"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    result = []\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        index_min = lst.index(min_val)\n        index_max = lst.index(max_val)\n        result.extend([min_val, max_val])\n        lst.pop(index_min)\n        lst.pop(index_max)\n    return result\n"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    last_two = set()\n    for i in range(len(s) - 2):\n        if s[i] in last_two or s[i+1] in last_two or s[i+2] in last_two:\n            return False\n        last_two.add(s[i])\n    return True\n"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst or len(lst) == 1:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif smallest < num < second_smallest:\n            second_smallest = num\n    return second_smallest\n"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst or len(lst) == 1:\n        return None\n    return sorted(lst)[1]\n"}
